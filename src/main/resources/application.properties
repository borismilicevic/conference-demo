# Spring boot application properties (https://docs.spring.io/spring-boot/docs/1.4.x/reference/html/common-application-properties.html)
# Spring boot provides a setup of default properties. On appendix A we can search for all the different properties and
# look up their default values, as well as see what starter or system the property comes from.
# For Example spring.datasource.url has a default of null and comes from DataSourceProperties

##### DATABASE #####
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=none
spring.jpa.hibernate.show-sql=true
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Database connection info should not be hardcoded into the app. It will be visible externally. We moved it to external
# environment variable. These are external property placeholders ${.}
# We added these properties into application environment variables.
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# Making properties vary from environment (local, testing, staging, production)
# Spring uses a combination of Spring profiles and profile-specific application property files to accomplish this
# We add a profile suffix to the application part of the file name. application-{profile}.properties
# To specify the profile we have to use -Dspring.profiles.active=dev parameter on app start (VM options)
# application.properties is always applied

# Newer approach to property files are .yaml property files. It has to be named application.yml and it need to live on
# class path. We can mix property and YAML file types.


#### Customer App properties ####
app.version=1.0.0